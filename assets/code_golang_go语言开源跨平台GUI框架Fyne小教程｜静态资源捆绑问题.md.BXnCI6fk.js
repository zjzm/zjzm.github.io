import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.B-XtCDNB.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"code/golang/go语言开源跨平台GUI框架Fyne小教程｜静态资源捆绑问题.md","filePath":"code/golang/go语言开源跨平台GUI框架Fyne小教程｜静态资源捆绑问题.md"}'),t={name:"code/golang/go语言开源跨平台GUI框架Fyne小教程｜静态资源捆绑问题.md"};function h(l,s,p,k,F,d){return n(),a("div",null,[...s[0]||(s[0]=[e(`<h2 id="一、基础应用" tabindex="-1"><strong>一、基础应用</strong> <a class="header-anchor" href="#一、基础应用" aria-label="Permalink to &quot;**一、基础应用**&quot;">​</a></h2><p><strong>fyne的静态资源其实就是把资源文件编译为二进制文件，然后在代码中直接作为变量传入。这种办法的好处在于，进行yne应用打包时可以 无需额外的图片资源。 需要用到类似于下列的命令：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//这个命令是把image.1.png病译为名叫bundLed.go的二进制义件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fyne</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image1.png</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bundled.go</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//这命$是把image.1.png添加到为名叫bund儿ed.g0的二进制文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fyne</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundle</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -append</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image2.png</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bundled.go</span></span></code></pre></div><h3 id="注意" tabindex="-1"><strong>注意</strong> <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;**注意**&quot;">​</a></h3><p><strong>·fyne bundle命令以乎不能自动更新，也就是多次添加相同内容后，在编泽时会出现提示重新声明了相同资源，建议此时删除文件oundle g,重新生成。 ·经过上述操作后，运行命令“go build main.go&quot;或者“go run main.go”极有可能还会出现如下错误提示：“.main.go:39:43:undefined:resourc elconPng&#39;”。此时，需要运行“go build.&quot;或者“go run.”,可解决此问题。</strong></p><h2 id="二、关于批量绑定资源与更新问题" tabindex="-1"><strong>二、关于批量绑定资源与更新问题</strong> <a class="header-anchor" href="#二、关于批量绑定资源与更新问题" aria-label="Permalink to &quot;**二、关于批量绑定资源与更新问题**&quot;">​</a></h2><p><strong>fyne资源只是一个具有唯一名称的字节集合，因此它可以是字体、声音文件或您希望加载的任何其他数据。此外，您还可以使用-append参数 将许多资源捆绑到一个文件中。如果要绑定多个文件，建议将命令保存在其中一个go文件（不是文件bundled.go)的go:generate头中，类似 于下面：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//YOU</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SHOULD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FIRST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RUN:go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> related</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resource</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file!!!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//And</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> then,compile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//go:generate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fyne</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundle</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundled.go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> icon.png</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//go:generate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fyne</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundle</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundled.go</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -append</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Logo.png</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//go:generate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fyne</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundle</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundled.go</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -append</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> imagecrawler.jpg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//…</span></span></code></pre></div><p><strong>把上面4、5、6行定好后，注意到其前部出现系统提示“rung0 generate&#39;”,，比时移动鼠标到这个链接处点击一下，系统即会自动运行4、5、6行 对应的fyne bundle命令，并且自动更新oundled.go文件。 如果您随后更改了任何资源或添加了新的资源，那么您可以更新上面的头并使用“go generate&quot;运行它来更新oundled.go文件。然后，您应该将 bundled.go添加到版本控制中，这样其他人就可以构建您的应用程序，而无需再运行“fyne bundle”。 上述方案要比在命令行下操作效率高多了。</strong> windows 不带命令行的打包命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ldflags</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-s -w -H=windowsgui&quot;</span></span></code></pre></div><p>打包为Windows可执行文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fyne</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -os</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> windows</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -icon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myIcon.ico</span></span></code></pre></div>`,12)])])}const o=i(t,[["render",h]]);export{r as __pageData,o as default};
